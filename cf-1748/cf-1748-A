// Problem
You have 𝑛 rectangular wooden blocks, which are numbered from 1 to 𝑛. The 𝑖-th block is 1 unit high and ⌈𝑖/2⌉
units long. Here, ⌈𝑥2⌉ denotes the result of division of 𝑥 by 2, rounded up. For example, ⌈4/2⌉=2 and ⌈5/2⌉=⌈2.5⌉=3

.

For example, if 𝑛=5, then the blocks have the following sizes: 1×1, 1×1, 1×2, 1×2, 1×3.

Find the maximum possible side length of a square you can create using these blocks, without rotating any of them. Note that you don't have to use all of the blocks. One of the ways to create 3×3
square using blocks 1 through 5

// Input

Each test contains multiple test cases. The first line contains a single integer 𝑡(1≤𝑡≤10^4) — the number of test cases. The first line of each test case contains a single integer 𝑛(1≤𝑛≤10^9) — the number of blocks.

//Output

For each test case, print one integer — the maximum possible side length of a square you can create.

// Example
// Input
3
2
5
197654321

// Output
1
3
98827161

// Solution
#include <bits/stdc++.h>

using namespace std;

int main() {
  int t;
  cin >> t;
  while (t--) {
    int n;
    cin >> n;
    cout << (int)ceil(n/2.0) << endl;
  }
  return 0;
}
