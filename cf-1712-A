// Problem
You are given a permutation 𝑝1,𝑝2,…,𝑝𝑛 of length 𝑛 and a positive integer 𝑘≤𝑛.

In one operation you can choose two indices 𝑖 and 𝑗 (1≤𝑖<𝑗≤𝑛) and swap 𝑝𝑖 with 𝑝𝑗.

Find the minimum number of operations needed to make the sum 𝑝1+𝑝2+…+𝑝𝑘 as small as possible.

A permutation is an array consisting of 𝑛 distinct integers from 1 to 𝑛 in arbitrary order. For example, [2,3,1,5,4] is a permutation, but [1,2,2] is not a permutation (2 appears twice in the array) and [1,3,4] is also not a permutation (𝑛=3 but there is 4 in the array).

// Input
Each test contains multiple test cases. The first line contains the number of test cases 𝑡(1≤𝑡≤100). Description of the test cases follows.

The first line of each test case contains two integers 𝑛 and 𝑘 (1≤𝑘≤𝑛≤100).

The second line of each test case contains 𝑛 integers 𝑝1,𝑝2,…,𝑝𝑛 (1≤𝑝𝑖≤𝑛). It is guaranteed that the given numbers form a permutation of length 𝑛.

// Output

For each test case print one integer — the minimum number of operations needed to make the sum 𝑝1+𝑝2+…+𝑝𝑘 as small as possible.

// Example
// Input
4
3 1
2 3 1
3 3
1 2 3
4 2
3 4 1 2
1 1
1

// Output
1
0
2
0

// Solution
#include <bits/stdc++.h>

using namespace std;

int main() {
  int t;
  cin >> t;
  while (t--) {
    int n, k;
    cin >> n >> k;
    
    int res  = 0;
    for (int i = 0; i < n; ++i) {
      int val;
      cin >> val;
      if (i >= k) {
        continue;
      }
      if (val > k) {
        res++;
      }
    }
    
    cout << res << endl;
  }
}
