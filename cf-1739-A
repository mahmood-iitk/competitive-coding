/*
Problem:
There is a chess board of size 𝑛×𝑚. The rows are numbered from 1 to 𝑛, the columns are numbered from 1 to 𝑚.
Let's call a cell isolated if a knight placed in that cell can't move to any other cell on the board. Recall that a chess knight moves two cells in one direction and one cell in a perpendicular direction:
Find any isolated cell on the board. If there are no such cells, print any cell on the board.
*/

// Solution

#include <bits/stdc++.h>

using namespace std;

int main() {
  int t;
  cin >> t;
  while (t--) {
    int n, m;
    cin >> n >> m;
    
    if (n == 1) {
      cout << "1 1" << endl;
      continue;
    }
    
    if (m == 1) {
      cout << "1 1" << endl;
      continue;
    }
    
    if ((n >= 2) && (m >= 4)) {
      cout << "1 1" << endl;
      continue;
    }
    
    if ((n >= 4) && (m >= 2)) {
      cout << "1 1" << endl;
      continue;
    }
    
    if ((n == 2) && (m <= 2)) {
      cout << "1 1" << endl;
      continue;
    }
    
    if ((m == 2) && (n <= 2)) {
      cout << "1 1" << endl;
      continue;
    }
    
    if ((n == 2) && (m == 3)) {
      cout << "1 2" << endl;
      continue;
    }

    if ((n == 3) && (m == 2)) {
      cout << "2 1" << endl;
      continue;
    }
    
    if ((n == 3) && (m == 3)) {
      cout << "2 2" << endl;
      continue;
    }
  }
  return 0;
}
