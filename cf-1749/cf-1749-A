// Problem
There's a chessboard of size 𝑛×𝑛. 𝑚 rooks are placed on it in such a way that:

    no two rooks occupy the same cell;
    no two rooks attack each other. 

A rook attacks all cells that are in its row or column.

Is it possible to move exactly one rook (you can choose which one to move) into a different cell so that no two rooks still attack each other? A rook can move into any cell in its row or column if no other rook stands on its path.

// Input

The first line contains a single integer 𝑡(1≤𝑡≤2000) — the number of testcases.

The first line of each testcase contains two integers 𝑛
and 𝑚 (1≤𝑛,𝑚≤8) — the size of the chessboard and the number of the rooks.

The 𝑖-th of the next 𝑚 lines contains two integers 𝑥𝑖 and 𝑦𝑖 (1≤𝑥𝑖,𝑦𝑖≤𝑛) — the position of the 𝑖-th rook: 𝑥𝑖 is the row and 𝑦𝑖 is the column.

No two rooks occupy the same cell. No two rooks attack each other.

// Output

For each testcase, print "YES" if it's possible to move exactly one rook into a different cell so that no two rooks still attack each other. Otherwise, print "NO".
Example
// Input
2
2 2
1 2
2 1
3 1
2 2

// Output
NO
YES

// Solution
#include <bits/stdc++.h>

using namespace std;

int main() {
  int t;
  cin >> t;
  while (t--) {
    int n, m;
    cin >> n >> m;
    for (int i = 0; i < m; ++i) {
      int x, y;
      cin >> x >> y;
    }
    
    if (n > m) {
      cout << "YES\n";
    } else {
      cout << "NO\n";
    }
  }
  return 0;
}
