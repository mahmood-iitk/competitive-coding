You are given an unsorted permutation 𝑝1,𝑝2,…,𝑝𝑛. To sort the permutation, you choose a constant 𝑘 (𝑘≥1) and do some operations on the permutation. In one operation, you can choose two integers 𝑖, 𝑗 (1≤𝑗<𝑖≤𝑛) such that 𝑖−𝑗=𝑘, then swap 𝑝𝑖 and 𝑝𝑗.

What is the maximum value of 𝑘 that you can choose to sort the given permutation?

A permutation is an array consisting of 𝑛 distinct integers from 1 to 𝑛 in arbitrary order. For example, [2,3,1,5,4] is a permutation, but [1,2,2] is not a permutation (2 appears twice in the array) and [1,3,4] is also not a permutation (𝑛=3 but there is 4 in the array).

An unsorted permutation 𝑝 is a permutation such that there is at least one position 𝑖 that satisfies 𝑝𝑖≠𝑖.

Input

Each test contains multiple test cases. The first line contains the number of test cases 𝑡
(1≤𝑡≤10^4). The description of the test cases follows.

The first line of each test case contains a single integer 𝑛 (2≤𝑛≤10^5) — the length of the permutation 𝑝.

The second line of each test case contains 𝑛 distinct integers 𝑝1,𝑝2,…,𝑝𝑛 (1≤𝑝𝑖≤𝑛) — the permutation 𝑝. It is guaranteed that the given numbers form a permutation of length 𝑛 and the given permutation is unsorted.

It is guaranteed that the sum of 𝑛 over all test cases does not exceed 2⋅10^5.

Output

For each test case, output the maximum value of 𝑘 that you can choose to sort the given permutation.
We can show that an answer always exists.

Example
Input

7
3
3 1 2
4
3 4 1 2
7
4 2 6 7 5 3 1
9
1 6 7 4 9 2 3 8 5
6
1 5 3 4 2 6
10
3 10 5 2 9 6 7 8 1 4
11
1 11 6 4 8 3 7 5 9 10 2

Output

1
2
3
4
3
2
3



Solution

#include <bits/stdc++.h>
#define ll long long

using namespace std;

int main() {
  int t;
  cin >> t;
  while (t--) {
    int n;
    cin >> n;

    int a[n];
    for (int i = 0; i < n; ++i) {
      cin >> a[i];
    }
    
    int k = abs(a[0] - 1);
    for (int i = 0; i < n; ++i) {
      k = __gcd(k, abs(a[i] - (i+1)));
    }
    cout << k << endl;

  }
}
