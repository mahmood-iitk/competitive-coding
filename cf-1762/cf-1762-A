// Problem
An array 𝑏 is good if the sum of elements of 𝑏 is even.

You are given an array 𝑎 consisting of 𝑛 positive integers. In one operation, you can select an index 𝑖 and change 𝑎𝑖:=⌊𝑎𝑖2⌋. †Find the minimum number of operations (possibly 0) needed to make 𝑎 good. It can be proven that it is always possible to make 𝑎 good.

†⌊𝑥⌋ denotes the floor function — the largest integer less than or equal to 𝑥. For example, ⌊2.7⌋=2, ⌊𝜋⌋=3 and ⌊5⌋=5.

// Input

Each test contains multiple test cases. The first line contains a single integer 𝑡(1≤𝑡≤1000) — the number of test cases. The description of the test cases follows.

The first line of each test case contains a single integer 𝑛 (1≤𝑛≤50) — the length of the array 𝑎.

The second line of each test case contains 𝑛 space-separated integers 𝑎1,𝑎2,…,𝑎𝑛 (1≤𝑎𝑖≤10^6) — representing the array 𝑎.

Do note that the sum of 𝑛 over all test cases is not bounded.

// Output

For each test case, output the minimum number of operations needed to make 𝑎 good.

// Example
// Input
4
4
1 1 1 1
2
7 4
3
1 2 4
1
15

// Output
0
2
1
4

// Solution
#include <bits/stdc++.h>

using namespace std;

int main() {
  int t;
  cin >> t;
  while (t--) {
    int n;
    cin >> n;
    int sum = 0;
    vector<int> vec(n);
    for (int i = 0; i < n; ++i) {
      cin >> vec[i];
      sum += vec[i];
    }

    int res = 10000000;    
    if (sum % 2 == 0) {
      res = 0;
    } else {
      for (int i = 0; i < n; ++i) {
        int val = vec[i];
        if (val % 2 == 0) {
          int tmp = 0;
          while (val%2 == 0) {
            val = val/2;
            tmp++;
          }
          res = min(res, tmp);
        } else {
          int tmp = 0;
          while (val%2 != 0) {
            val = val/2;
            tmp++;
          }
          res = min(res, tmp);          
        }
      }
    }
    
    cout << res << endl;
  }
  return 0;
}
