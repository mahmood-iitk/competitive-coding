// Problem
You have a sequence 𝑎1,𝑎2,…,𝑎𝑛 of length 𝑛, consisting of integers between 1 and 𝑚. You also have a string 𝑠, consisting of 𝑚 characters B.

You are going to perform the following 𝑛operations.

    At the 𝑖-th (1≤𝑖≤𝑛) operation, you replace either the 𝑎𝑖-th or the (𝑚+1−𝑎𝑖)-th character of 𝑠
    with A. You can replace the character at any position multiple times through the operations. 

Find the lexicographically smallest string you can get after these operations.

A string 𝑥 is lexicographically smaller than a string 𝑦 of the same length if and only if in the first position where 𝑥 and 𝑦 differ, the string 𝑥 has a letter that appears earlier in the alphabet than the corresponding letter in 𝑦.

// Input

The first line contains the number of test cases 𝑡(1≤𝑡≤2000).

The first line of each test case contains two integers 𝑛 and 𝑚 (1≤𝑛,𝑚≤50) — the length of the sequence 𝑎 and the length of the string 𝑠 respectively.

The second line contains 𝑛 integers 𝑎1,𝑎2,…,𝑎𝑛 (1≤𝑎𝑖≤𝑚) — the sequence 𝑎.

// Output

For each test case, print a string of length 𝑚 — the lexicographically smallest string you can get. Each character of the string should be either capital English letter A or capital English letter B.

// Example
// Input
6
4 5
1 1 3 1
1 5
2
4 1
1 1 1 1
2 4
1 3
2 7
7 5
4 5
5 5 3 5

// Output
ABABA
BABBB
A
AABB
ABABBBB
ABABA

// Solution
#include <bits/stdc++.h>

using namespace std;

int main() {
  int t;
  cin >> t;
  while (t--) {
    int n, m;
    cin >> n >> m;
    
    vector<int> vec(n);
    for (int i = 0; i < n; ++i) {
      cin >> vec[i];
    }
    
    set<int> my_set;
    for (int i = 0; i < n; ++i) {
      if (my_set.find(vec[i]) != my_set.end()) {
        my_set.emplace(m + 1 - vec[i]);  
        continue;
      }
      
      if (my_set.find(m + 1 - vec[i]) != my_set.end()) {
        my_set.emplace(vec[i]);  
        continue;
      }
      
      if (vec[i] < (m + 1 - vec[i])) {
        my_set.emplace(vec[i]);
      } else {
        my_set.emplace(m + 1 - vec[i]);
      }
    }
    
    for (int i = 1; i <= m; ++i) {
      if (my_set.find(i) == my_set.end()) {
        cout << "B";
      } else {
        cout << "A";
      }
    }
    cout << endl;
    
  }
}
